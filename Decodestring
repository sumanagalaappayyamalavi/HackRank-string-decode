{-
Consider a string consisting of lowercase English alphabetic letters (i.e., [a-z]) only. We use the following rules to encode all of its characters into string s:
a is encoded as 1, b is encoded as 2, c is encoded as 3, …, and i is encoded as 9.
j is encoded as 10#, k is encoded as 11#, l is encoded as 12#, …, and z is encoded as 26#.
If there are two or more consecutive occurrences of any character, then the character count is written within parentheses (i.e., (c), where c is an integer denoting the count of consecutive occurrences being encoded) immediately following the encoded character. For example, consider the following string encodings:
String "abzx" is encoded as s = "1226#24#".
String "aabccc" is encoded as s = "1(2)23(3)".
String "bajj" is encoded as s = "2110#(2)".
String "wwxyzwww" is encoded as s = "23#(2)24#25#26#23#(3)".
 
Complete the frequency function in the editor below. It has one parameter: a string, s, that was encoded using the rules above and consists of digits (i.e., decimal integers from 0 to 9), # symbols, and parentheses. It must return an array of 26 integers where:
The element at index 0 denotes the frequency of character a in the original string.
The element at index 1 denotes the frequency of character b in the original string.
The element at index 2 denotes the frequency of character c in the original string.
…
The element at index 25 denotes the frequency of character z in the original string.
 
Input Format
Locked stub code in the editor reads encoded string s from stdin and passes it to the function.
 
Constraints
String s consists of decimal integers from 0 to 9, #'s, and ()'s only.
1 ≤ length of s ≤ 105
It is guaranteed that string s is a valid encoded string.
2 ≤ c ≤ 104, where c is a parenthetical count of consecutive occurrences of an encoded character.
 
Output Format
The function must return an array of 26 integers denoting the respective frequencies of each character (i.e., a through z) in the decoded string. This is printed to stdout by locked stub code in the editor.
 
Sample Input 0
1226#24#
 
Sample Output 0
1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1
 
Explanation 0
 
Sample Input 1
1(2)23(3)
 
Sample Output 1
2 1 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 
Explanation 1
 
Sample Input 2
2110#(2)
 
Sample Output 2
1 1 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 
Explanation 2
 
Sample Input 3
23#(2)24#25#26#23#(3)
 
Sample Output 3
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5 1 1 1


##########################################################

package com.hack;
import java.util.*;
public class DecodeNom {
 public static void main(String args[]) {
	 Scanner scanner = new Scanner(System.in);
	 
	 String str = scanner.next();
	 int arr [] = new int[26];
	 Arrays.fill(arr, 0);
	 for(int i=0; i<str.length();i++) {
		 int num;
		 
		 if((i+2)<str.length() && str.charAt(i+2)=='#') {
			 num = (str.charAt(i)-'0')*10 + (str.charAt(i+1)-'0');
			
			 i+=2;
		 }
		 else {
			 num =(str.charAt(i)-'0');
		 }
		 int cnt = 0;
		 int ten = 10;
		 if((i+1)<str.length() && str.charAt(i+1)=='(') {
			 i=i+2;
			 while(i<str.length() && str.charAt(i)!=')')
			 {
				 cnt = cnt*ten + (str.charAt(i)-'0');
				 i++;
			 }
		 }
		 else
		 {
			 cnt = 1;
		 }
		 arr[num-1] = cnt+arr[num-1];
	 }
	 
	 for(int i=0;i<26;i++) {
		 System.out.print(arr[i]);
	 }
 }
}
